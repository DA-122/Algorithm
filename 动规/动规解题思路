
背包问题:背包问题主要包括01背包、完全背包、多重背包问题,按照题目要求又可以分为求组合数和求排列数,按所求结果(最大价值、最多物品、最大组合数、最少物品数)有不同的递推公式
1. O1背包问题:有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i],价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。
思路分析: 使用暴力解法,每件物品可以选择装或不装,比较所有情况算法复杂度为O(2^n),不可取,
二维dp数组设置: dp[i][j]存放value,  i<n(物品序号), j<w(当前背包容量), 
递推公式：不放物品 dp[i][j] = dp[i-1][j]
         放物品  dp[i][j] = dp[i-1][j-weight[i]] + value[i]
         dp[i][j] = max(dp[i-1][j],dp[i-1][j-weight[i]] + value[i])
         dp[i-1][j-weight[i]] 容量为j-weight[i]时不放的总价值
初始值: dp[0][j] = 0;
        dp[0][j-weight[0]] = vaule[0];
迭代方向:从前向后。

一维dp数组设置


2. 完全背包问题:有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i],价值是value[i]。每件物品有无限个，求将哪些物品放入背包里价值最大。
思路分析： 在01背包问题中,使用一维数组进行动规，背包容量遍历是从后往前的，这是为了避免物品重复加入到背包中,如果我们从前往后遍历，就相当于允许重复加入到背包，
递推公式:  不放物品 dp[j] = dp[j]
          放物品 dp[j] = max(dp[j],dp[j-weight[i]]+value[i])
初始值： dp[j] = 0;
迭代方向:从前向后。

3.多重背包问题：有N种物品和一个容量为V 的背包。第i种物品最多有Mi件可用，每件耗费的空间是Ci ，价值是Wi 。求解将哪些物品装入背包可使这些物品的耗费的空间 总和不超过背包容量，且价值总和最大。

实际上就是01背包问题